/* 
 * Copyright (C) 2018 Matthew Cumbo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cryptmessage;

import java.awt.Color;
import java.io.*;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import javax.swing.filechooser.FileNameExtensionFilter;

//import java.awt.event.*;
/**
 *
 * @author Matthew Cumbo
 */
public class MainFrame extends javax.swing.JFrame {

    private final JFileChooser fc = new JFileChooser();
    private final FileNameExtensionFilter fftxt = new FileNameExtensionFilter(".CMF (Cryptic Message File)", "cmf");
    private final char[] CHAR_LIST = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
                                      'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
                                      'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
                                      'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
                                      's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3',
                                      '4', '5', '6', '7', '8', '9', '0', '_', ' ', '!', '@',
                                      '#', '$', '%', '^', '&', '*', '(', ')', '-', '+', '=',
                                      '{', '}', '[', ']', '\\', '|', ':', ';', '\'', '"', '<',
                                      '>', ',', '.', '/', '?', '~', '`'};
    private  final ArrayList<String> chrs = new ArrayList<>();
    private int maxLength;
    
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        getContentPane().setBackground(Color.black);
    }
    /**
     * Gets the location of a character from the array CHAR_LIST
     * @param a the character to look for
     * @return position of the character in CHAR_LIST, otherwise -1
     */
    private int get(char a){
        for(int i=0; i<CHAR_LIST.length; i++){
            if(CHAR_LIST[i]==a)
                    return i;
        }
        return -1;
    }
    
    /**
     * Gets the char associated with a string
     * @pre chrs is not empty
     * @param str cryptic string
     * @return associated char
     */
    private char getChar(String str){
        if(chrs.isEmpty()){
            return '\0';
        }
        int count = 0;
        for(String n: chrs){
            if(str.equals(n)){
                return CHAR_LIST[count];
            }
            count++;
        } 
        return '\0';
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblYourMessage = new javax.swing.JLabel();
        lblOutputText = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        txtOutput = new javax.swing.JTextField();
        btnTranslate = new javax.swing.JButton();
        lblLanguage = new javax.swing.JLabel();
        lblNameLanguage = new javax.swing.JLabel();
        chkInvert = new javax.swing.JCheckBox();
        lblCcount = new javax.swing.JLabel();
        lblCharCount = new javax.swing.JLabel();
        btnCopy = new javax.swing.JButton();
        btnClearInput = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        lblCopied = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mnuOptions = new javax.swing.JMenu();
        mnuChangeLang = new javax.swing.JMenuItem();
        itmOpenEditor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptMessage");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainFrame.class.getResource("appicon.png")));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Consolas", 0, 48)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 255, 51));
        lblTitle.setText("CryptMessage");
        lblTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblTitle.setName(""); // NOI18N
        lblTitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblTitleMousePressed(evt);
            }
        });

        lblYourMessage.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        lblYourMessage.setForeground(new java.awt.Color(102, 255, 51));
        lblYourMessage.setText("Input message:");

        lblOutputText.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        lblOutputText.setForeground(new java.awt.Color(102, 255, 51));
        lblOutputText.setText("Output text:");

        txtInput.setBackground(new java.awt.Color(0, 0, 0));
        txtInput.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        txtInput.setForeground(new java.awt.Color(102, 255, 51));
        txtInput.setCaretColor(new java.awt.Color(102, 255, 51));
        txtInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtInput.setNextFocusableComponent(btnTranslate);
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });
        txtInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInputKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInputKeyTyped(evt);
            }
        });

        txtOutput.setEditable(false);
        txtOutput.setBackground(new java.awt.Color(0, 0, 0));
        txtOutput.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        txtOutput.setForeground(new java.awt.Color(102, 255, 51));
        txtOutput.setText(" ");
        txtOutput.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtOutput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtOutputMouseReleased(evt);
            }
        });
        txtOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOutputActionPerformed(evt);
            }
        });
        txtOutput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtOutputPropertyChange(evt);
            }
        });

        btnTranslate.setBackground(new java.awt.Color(0, 0, 0));
        btnTranslate.setFont(new java.awt.Font("OCR A Extended", 0, 24)); // NOI18N
        btnTranslate.setForeground(new java.awt.Color(102, 255, 51));
        btnTranslate.setText("Translate");
        btnTranslate.setNextFocusableComponent(btnCopy);
        btnTranslate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTranslateMouseClicked(evt);
            }
        });
        btnTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranslateActionPerformed(evt);
            }
        });

        lblLanguage.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        lblLanguage.setForeground(new java.awt.Color(102, 255, 51));
        lblLanguage.setText("Language:");

        lblNameLanguage.setBackground(new java.awt.Color(102, 102, 102));
        lblNameLanguage.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        lblNameLanguage.setForeground(new java.awt.Color(102, 255, 51));
        lblNameLanguage.setText(" ");
        lblNameLanguage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        chkInvert.setBackground(new java.awt.Color(0, 0, 0));
        chkInvert.setForeground(new java.awt.Color(102, 255, 51));
        chkInvert.setText("Translating cryptographic message");
        chkInvert.setToolTipText("Inverts output and input");
        chkInvert.setFocusable(false);

        lblCcount.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        lblCcount.setForeground(new java.awt.Color(102, 255, 51));
        lblCcount.setText("Character count:");

        lblCharCount.setFont(new java.awt.Font("DialogInput", 0, 18)); // NOI18N
        lblCharCount.setForeground(new java.awt.Color(102, 255, 51));
        lblCharCount.setText("0");
        lblCharCount.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCopy.setBackground(new java.awt.Color(0, 0, 0));
        btnCopy.setForeground(new java.awt.Color(102, 255, 51));
        btnCopy.setText("Copy");
        btnCopy.setNextFocusableComponent(txtInput);
        btnCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCopyMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCopyMousePressed(evt);
            }
        });
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        btnClearInput.setBackground(new java.awt.Color(0, 0, 0));
        btnClearInput.setForeground(new java.awt.Color(102, 255, 51));
        btnClearInput.setText("X");
        btnClearInput.setToolTipText("Clear input");
        btnClearInput.setFocusable(false);
        btnClearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearInputActionPerformed(evt);
            }
        });

        btnPaste.setBackground(new java.awt.Color(0, 0, 0));
        btnPaste.setForeground(new java.awt.Color(102, 255, 51));
        btnPaste.setText("Paste");
        btnPaste.setNextFocusableComponent(txtInput);
        btnPaste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPasteMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnPasteMousePressed(evt);
            }
        });
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });

        lblCopied.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCopied.setForeground(java.awt.Color.blue);

        mnuOptions.setText("Options");

        mnuChangeLang.setText("Change Language");
        mnuChangeLang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChangeLangActionPerformed(evt);
            }
        });
        mnuOptions.add(mnuChangeLang);

        itmOpenEditor.setText("Open Editor");
        itmOpenEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmOpenEditorActionPerformed(evt);
            }
        });
        mnuOptions.add(itmOpenEditor);

        menuBar.add(mnuOptions);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(chkInvert)
                        .addGap(3, 3, 3)
                        .addComponent(btnTranslate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(lblOutputText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(lblCcount)
                        .addGap(7, 7, 7)
                        .addComponent(lblCharCount, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(203, 203, 203)
                        .addComponent(lblCopied, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLanguage)
                                .addGap(18, 18, 18)
                                .addComponent(lblNameLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblYourMessage)
                                .addGap(18, 18, 18)
                                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClearInput)
                            .addComponent(btnPaste, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClearInput)
                                .addGap(1, 1, 1)
                                .addComponent(btnPaste, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(lblYourMessage))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNameLanguage)
                    .addComponent(lblLanguage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkInvert)
                    .addComponent(btnTranslate, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutputText)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblCcount))
                    .addComponent(lblCharCount)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblCopied, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        lblTitle.getAccessibleContext().setAccessibleName("lblTitle");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranslateActionPerformed
        txtOutput.setText("");
        txtOutput.setBackground(Color.black);
        String inp = txtInput.getText();
        lblCopied.setText("");
        if(chrs.isEmpty()){
            txtOutput.setText(inp);
        }
        else if(!chkInvert.isSelected()){
           for(int i=0; i<inp.length(); i++){
               if(get(inp.charAt(i)) != -1)
                    txtOutput.setText(txtOutput.getText() + chrs.get(get(inp.charAt(i))));
           }
        }
        else{
           try{
                for(int j=0; j<inp.length(); j+=maxLength){
                    if(getChar(inp.substring(j, j+maxLength))=='\0'){
                        txtOutput.setText("Error: input does not match language standards.");
                        txtOutput.setBackground(Color.red);
                        return;
                    }
                    txtOutput.setText(txtOutput.getText() + getChar(inp.substring(j, j+maxLength)));
                }
           }catch(StringIndexOutOfBoundsException ex){
               txtOutput.setBackground(Color.red);
               txtOutput.setText("Error: input does not match language standards.");
           }
        }
        if(txtOutput.getText().length()>9999){
            lblCharCount.setText("9999+");
        }
        else{
            lblCharCount.setText(Integer.toString(txtOutput.getText().length()));
        }
    }//GEN-LAST:event_btnTranslateActionPerformed

    private void btnTranslateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTranslateMouseClicked
        
    }//GEN-LAST:event_btnTranslateMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void txtInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputKeyPressed
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
            btnTranslate.setSelected(true);
            btnTranslateActionPerformed(null);
        }
    }//GEN-LAST:event_txtInputKeyPressed

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputActionPerformed

    private void lblTitleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTitleMousePressed
       
    }//GEN-LAST:event_lblTitleMousePressed

    private void itmOpenEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmOpenEditorActionPerformed
        new EditFrame().setVisible(true);
    }//GEN-LAST:event_itmOpenEditorActionPerformed

    private void txtInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputKeyTyped
        
    }//GEN-LAST:event_txtInputKeyTyped

    private void txtOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputActionPerformed

    private void txtOutputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOutputMouseReleased
        
    }//GEN-LAST:event_txtOutputMouseReleased

    private void btnCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCopyMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCopyMouseClicked

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnCopyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCopyMousePressed
        StringSelection stringSelection = new StringSelection(txtOutput.getText());
        Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
        clpbrd.setContents(stringSelection, null);
        lblCopied.setText("Output copied to clipboard");
    }//GEN-LAST:event_btnCopyMousePressed

    private void btnClearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearInputActionPerformed
        txtInput.setText("");
    }//GEN-LAST:event_btnClearInputActionPerformed

    private void btnPasteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPasteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPasteMouseClicked

    private void btnPasteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPasteMousePressed
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable t = clip.getContents(this);
        if (t == null)
            return;
        try {
            txtInput.setText(txtInput.getText() + (String) t.getTransferData(DataFlavor.stringFlavor));
        } catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnPasteMousePressed

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        
    }//GEN-LAST:event_btnPasteActionPerformed

    private void txtOutputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtOutputPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOutputPropertyChange

    private void mnuChangeLangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeLangActionPerformed
        File f;
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(fftxt);
        int opVal = fc.showOpenDialog(null);
        if(opVal==JFileChooser.APPROVE_OPTION){
            f = fc.getSelectedFile();
        }
        else{return;}
        try{
            chrs.clear();
            String t;
            BufferedReader br = new BufferedReader(new FileReader(f));
            int n = 0;
            while((t = br.readLine())!=null){
                if(n==0)
                    lblNameLanguage.setText(EditFrame.decrypt(t));
                if(n==1)
                    maxLength = Integer.parseInt(EditFrame.decrypt(t));
                if(n>1)
                    chrs.add(EditFrame.decrypt(t));
                n++;
            }
            txtOutput.setText(" ");
        }catch(FileNotFoundException ex){
            lblNameLanguage.setText(" ");
            JOptionPane.showMessageDialog(null, "This file does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }catch(IOException ex){
            lblNameLanguage.setText(" ");
            JOptionPane.showMessageDialog(null, "Input/Output exception was thrown.", "Error", JOptionPane.ERROR_MESSAGE);
        }catch(NumberFormatException ex){
            lblNameLanguage.setText(" ");
            JOptionPane.showMessageDialog(null, "File is invalid or corrupted.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mnuChangeLangActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows Classic look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearInput;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnTranslate;
    private javax.swing.JCheckBox chkInvert;
    private javax.swing.JMenuItem itmOpenEditor;
    private javax.swing.JLabel lblCcount;
    private javax.swing.JLabel lblCharCount;
    private javax.swing.JLabel lblCopied;
    private javax.swing.JLabel lblLanguage;
    private javax.swing.JLabel lblNameLanguage;
    private javax.swing.JLabel lblOutputText;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblYourMessage;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mnuChangeLang;
    private javax.swing.JMenu mnuOptions;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables
}
